{"version":3,"sources":["components/OrderId.js","components/OrderBot.js","App.js","serviceWorker.js","index.js"],"names":["Orderid","props","state","loading","result","trigger","triggetNext","bind","self","this","previousStep","data","sessionId","queryInput","text","value","languageCode","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","console","log","responseAnswer","fulfillmentMessages","setState","includes","triggerNextStep","className","Component","defaultProps","steps","undefined","OrderBot","dialogFlow","message","Axios","post","id","options","label","component","asMessage","replace","waitAction","user","config","width","height","floating","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b863411b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ChatBot, { Loading } from \"react-simple-chatbot\";\nimport PropTypes from \"prop-types\";\nclass Orderid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      result: null,\n      trigger: false,\n    };\n\n    this.triggetNext = this.triggetNext.bind(this);\n  }\n\n  async componentWillMount() {\n    const self = this;\n    const { previousStep } = this.props;\n    const url = \"https://yo-yo-pizza.herokuapp.com/chat\";\n    const data = {\n      sessionId: \"foo\",\n      queryInput: {\n        text: {\n          text: previousStep.value,\n          languageCode: \"en-US\",\n        },\n      },\n    };\n\n    try {\n      // Default options are marked with *\n      const response = await fetch(url, {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, *cors, same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n          \"Content-Type\": \"application/json\",\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrerPolicy: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      });\n      const result = await response.json();\n      console.log(JSON.stringify(result));\n      const responseAnswer = result.fulfillmentMessages[0].text.text[0];\n      console.log(\"order\", responseAnswer);\n      if (responseAnswer) {\n        self.setState(\n          {\n            loading: false,\n            result: responseAnswer,\n            trigger: true,\n          },\n          () => self.triggetNext(responseAnswer)\n        );\n      } else {\n        self.setState(\n          {\n            loading: false,\n            result: \"Error with the info you have given.Please check\",\n          },\n          () => self.triggetNext(\"Thank you\")\n        );\n      }\n    } catch (error) {\n      self.setState({ loading: false, result: `Error ${error}` }, () =>\n        self.triggetNext(\"Thank you\")\n      );\n    }\n  }\n\n  componentDidMount() {}\n\n  triggetNext(response) {\n    if (response.includes(\"Thank you\")) {\n      this.props.triggerNextStep({ value: null, trigger: \"Greet\" });\n    } else {\n      this.props.triggerNextStep();\n    }\n  }\n\n  render() {\n    console.log(\"props==>\", this.props);\n    const { trigger, loading, result } = this.state;\n\n    return (\n      <div className=\"Orderid\">{loading ? <Loading /> : <p>{result}</p>}</div>\n    );\n  }\n}\n\nOrderid.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func,\n};\n\nOrderid.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined,\n};\n\nexport default Orderid;\n","import Axios from \"axios\";\nimport React, { Component } from \"react\";\nimport ChatBot, { Loading } from \"react-simple-chatbot\";\nimport Orderid from \"./OrderId\";\nexport default class OrderBot extends Component {\n  constructor(props) {\n    super(props);\n    this.steps = [\n      {\n        id: \"Greet\",\n        message: \"Hello, Welcome to our shop\",\n        trigger: \"welcomeOptions\",\n      },\n      {\n        id: \"welcomeOptions\",\n        options: [\n          {\n            value: \"Can you please place my order?\",\n            label: \"Place an order\",\n            trigger: \"botQ\",\n          },\n          {\n            value: \"I want to give feedback for my order?\",\n            label: \"Feedback for an order\",\n            trigger: \"botQ\",\n          },\n          {\n            value: \"What is the status of the order?\",\n            label: \"Status of an order\",\n            trigger: \"botQ\",\n          },\n          {\n            value: \"Operations\",\n            label: \"Operations(return/exchange/cancellation)\",\n            trigger: \"operations\",\n          },\n        ],\n      },\n      {\n        id: \"botQ\",\n        component: <Orderid></Orderid>,\n        asMessage: true,\n        replace: false,\n        waitAction: true,\n        trigger: \"userA\",\n      },\n      {\n        id: \"userA\",\n        user: true,\n        trigger: \"botQ\",\n      },\n      {\n        id: \"operations\",\n        options: [\n          {\n            value: \"I want a refund\",\n            label: \"refund\",\n            trigger: \"botQ\",\n          },\n          {\n            value: \"I want to exchange my product\",\n            label: \"exchange\",\n            trigger: \"botQ\",\n          },\n          {\n            value: \"I want to cancel my order\",\n            label: \"cancellation\",\n            trigger: \"botQ\",\n          },\n        ],\n      },\n    ];\n    this.config = {\n      width: \"450px\",\n      height: \"550px\",\n      floating: true,\n    };\n  }\n\n  dialogFlow = (message) => {\n    const url = \"https://yo-yo-pizza.herokuapp.com/chat\";\n    const data = {\n      sessionId: \"foo\",\n      queryInput: {\n        text: {\n          text: message,\n          languageCode: \"en-US\",\n        },\n      },\n    };\n    Axios.post(url, data);\n  };\n\n  render() {\n    return <ChatBot steps={this.steps} {...this.config}></ChatBot>;\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Bot from \"./components/OrderBot\";\n\nfunction App() {\n  return <Bot></Bot>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}